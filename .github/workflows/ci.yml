name: CI FOR MVP

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  CI:
    name: Continuous Integration
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_ACCESS_EXPIRATION: ${{ secrets.JWT_ACCESS_EXPIRATION }}
      JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
      NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'auth'
          mysql user: 'root'
          mysql password: '0000'

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            nc -z 127.0.0.1 3306 && echo "MySQL is up!" && exit 0
            echo "Waiting ($i)..."
            sleep 2
          done
          echo "MySQL did not start in time." && exit 1

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Create application.properties & secrets
        run: |
          mkdir -p ./src/main/resources

          cat <<EOT > ./src/main/resources/application.properties
          spring.application.name=auth
          spring.config.import=classpath:application-secret.properties
          spring.datasource.url=jdbc:mysql://localhost:3306/auth
          spring.datasource.username=root
          spring.datasource.password=0000
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.show-sql=true
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
          EOT
          
          cat <<EOT > ./src/main/resources/application-secret.properties
          jwt.secret="$JWT_SECRET"
          jwt.access-token-expiration=$JWT_ACCESS_EXPIRATION
          jwt.refresh-token-expiration=$JWT_REFRESH_EXPIRATION
    
          # Google OAuth
          spring.security.oauth2.client.registration.google.client-id="$GOOGLE_CLIENT_ID"
          spring.security.oauth2.client.registration.google.client-secret="$GOOGLE_CLIENT_SECRET"
          spring.security.oauth2.client.registration.google.scope=email,profile
          spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?prompt=consent
          spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
          spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
    
          # Naver OAuth
          spring.security.oauth2.client.registration.naver.client-id="$NAVER_CLIENT_ID"
          spring.security.oauth2.client.registration.naver.client-secret="$NAVER_CLIENT_SECRET"
          spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
          spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.naver.client-name=Naver
          spring.security.oauth2.client.registration.naver.scope=name,email
          spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
          spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
          spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
          spring.security.oauth2.client.provider.naver.user-name-attribute=response
    
          # Kakao OAuth
          spring.security.oauth2.client.registration.kakao.client-id="$KAKAO_CLIENT_ID"
          spring.security.oauth2.client.registration.kakao.client-secret="$KAKAO_CLIENT_SECRET"
          spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
          spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.kakao.client-name=Kakao
          spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
          spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize?prompt=login
          spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
          spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
          spring.security.oauth2.client.provider.kakao.user-name-attribute=id
          EOT

      - name: Create application-test.properties
        run: |
          mkdir -p ./src/test/resources
          
          cat <<EOT > ./src/test/resources/application-test.properties
          spring.config.import=classpath:application-secret.properties
          spring.jpa.properties.hibernate.globally_quoted_identifiers=true
          spring.datasource.url=jdbc:h2:mem:testdb
          spring.datasource.driver-class-name=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
          EOT
          
          cat <<EOT > ./src/test/resources/application-secret.properties
          jwt.secret="$JWT_SECRET"
          jwt.access-token-expiration=$JWT_ACCESS_EXPIRATION
          jwt.refresh-token-expiration=$JWT_REFRESH_EXPIRATION
          
          # Google OAuth
          spring.security.oauth2.client.registration.google.client-id="$GOOGLE_CLIENT_ID"
          spring.security.oauth2.client.registration.google.client-secret="$GOOGLE_CLIENT_SECRET"
          spring.security.oauth2.client.registration.google.scope=email,profile
          spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?prompt=consent
          spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
          spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
          
          # Naver OAuth
          spring.security.oauth2.client.registration.naver.client-id="$NAVER_CLIENT_ID"
          spring.security.oauth2.client.registration.naver.client-secret="$NAVER_CLIENT_SECRET"
          spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
          spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.naver.client-name=Naver
          spring.security.oauth2.client.registration.naver.scope=name,email
          spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
          spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
          spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
          spring.security.oauth2.client.provider.naver.user-name-attribute=response
          
          # Kakao OAuth
          spring.security.oauth2.client.registration.kakao.client-id="$KAKAO_CLIENT_ID"
          spring.security.oauth2.client.registration.kakao.client-secret="$KAKAO_CLIENT_SECRET"
          spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
          spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
          spring.security.oauth2.client.registration.kakao.client-name=Kakao
          spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
          spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize?prompt=login
          spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
          spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
          spring.security.oauth2.client.provider.kakao.user-name-attribute=id
          EOT   

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests with test profile
        run: ./gradlew test -Dspring.profiles.active=test
